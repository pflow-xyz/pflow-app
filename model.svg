<svg xmlns="http://www.w3.org/2000/svg" width="1312" height="315" viewBox="-17 52 1312 315" onload="init(evt)">
                           <defs>
                               <marker id="markerArrow1" markerWidth="15" markerHeight="8" refX="7" refY="4" orient="auto">
                                   <path d="M2,1 L2,8 L7,4 L2,1"></path>
                               </marker>
                               <marker id="markerInhibit1" markerWidth="15" markerHeight="8" refX="7" refY="4" orient="auto">
                                   <circle cx="4" cy="4.5" r="3"></circle>
                               </marker>
                           </defs>
                           <style>
                               .place { fill: #ffffff; stroke: #000000; stroke-width: 1.5; }
                               .transition { fill: #fab5b0; stroke: #000000; }
                               .transition.special { fill: #62fa75; }
                               .arc { stroke: #000000; stroke-width: 2; }
                               .label { font-size: small; }
                               .token { fill: #000000; }
                           </style>
                           <script type="text/ecmascript">
                               <![CDATA[
                                  let petriNet = {};
                                  function init(evt) {
                                      let metadataElement = document.getElementById("metadata");
                                      if (metadataElement) {
                                          let metadata = metadataElement.textContent.trim();
                                          try {
                                              petriNet = JSON.parse(metadata);
                                              createElements();
                                              updateTokens();
                                          } catch (error) {
                                              console.error("Failed to parse metadata: ", error);
                                          }
                                      } else {
                                          console.error("Metadata element not found");
                                      }
                                  }

                                  function createElements() {
                                      const svg = document.querySelector("svg");

                                      // Clear existing elements
                                      document.querySelectorAll(".place, .transition, .arc, .label").forEach(e => e.remove());

                                      // Create arcs
                                      Object.entries(petriNet.transitions).forEach(([id, transition]) => {
                                          transition.inputs.forEach(input => {
                                              let line = document.createElementNS("http://www.w3.org/2000/svg", "line");
                                              line.setAttribute("class", "arc");
                                              line.setAttribute("x1", petriNet.places[input].x);
                                              line.setAttribute("y1", petriNet.places[input].y);
                                              line.setAttribute("x2", 190);
                                              line.setAttribute("y2", 150);
                                              line.setAttribute("marker-end", "url(#markerArrow1)");
                                              svg.appendChild(line);
                                          });

                                          transition.outputs.forEach(output => {
                                              let line = document.createElementNS("http://www.w3.org/2000/svg", "line");
                                              line.setAttribute("class", "arc");
                                              line.setAttribute("x1", 210);
                                              line.setAttribute("y1", 150);
                                              line.setAttribute("x2", petriNet.places[output].x - 20);
                                              line.setAttribute("y2", petriNet.places[output].y);
                                              line.setAttribute("marker-end", "url(#markerArrow1)");
                                              svg.appendChild(line);
                                          });
                                      });

                                      // Create places
                                      Object.entries(petriNet.places).forEach(([id, place]) => {
                                          let circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                                          circle.setAttribute("id", id);
                                          circle.setAttribute("class", "place");
                                          circle.setAttribute("cx", place.x);
                                          circle.setAttribute("cy", place.y);
                                          circle.setAttribute("r", "16");
                                          svg.appendChild(circle);

                                          let text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                                          text.setAttribute("x", place.x - 18);
                                          text.setAttribute("y", place.y - 20);
                                          text.setAttribute("class", "label");
                                          text.textContent = id.toUpperCase();
                                          svg.appendChild(text);
                                      });

                                      // Create transitions
                                      Object.entries(petriNet.transitions).forEach(([id, transition]) => {
                                          let rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                                          rect.setAttribute("id", id);
                                          rect.setAttribute("class", "transition");
                                          rect.setAttribute("x", 190);
                                          rect.setAttribute("y", 135);
                                          rect.setAttribute("width", "30");
                                          rect.setAttribute("height", "30");
                                          rect.setAttribute("rx", "4");
                                          rect.setAttribute("onclick", `fireTransition('${id}')`);
                                          svg.appendChild(rect);

                                          let text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                                          text.setAttribute("x", 180);
                                          text.setAttribute("y", 130);
                                          text.setAttribute("class", "label");
                                          text.textContent = id.toUpperCase();
                                          svg.appendChild(text);
                                      });
                                  }

                                  function fireTransition(id) {
                                      if (!petriNet.transitions || !petriNet.transitions[id]) {
                                          console.error(`Transition '${id}' not found in petriNet.transitions`);
                                          return;
                                      }

                                      let transition = petriNet.transitions[id];
                                      let inputPlace = transition.inputs[0];
                                      let outputPlace = transition.outputs[0];

                                      if (petriNet.places[inputPlace].tokens > 0) {
                                          petriNet.places[inputPlace].tokens--;
                                          petriNet.places[outputPlace].tokens++;
                                          console.log(`Fired transition: ${id}`);
                                          updateTokens();
                                      } else {
                                          console.warn(`No tokens available in '${inputPlace}' to fire transition '${id}'`);
                                      }
                                  }

                                  function updateTokens() {
                                      // Remove existing tokens
                                      document.querySelectorAll(".token").forEach(e => e.remove());

                                      // Create new tokens
                                      Object.entries(petriNet.places).forEach(([id, place]) => {
                                          for (let i = 0; i < place.tokens; i++) {
                                              let token = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                                              token.setAttribute("cx", place.x);
                                              token.setAttribute("cy", place.y);
                                              token.setAttribute("r", "2");
                                              token.setAttribute("class", "token");
                                              document.querySelector("svg").appendChild(token);
                                          }
                                      });
                                  }
                              ]]>
                           </script>
                           <metadata id="metadata">
                               {
                               "places": {
                               "p1": { "tokens": 1, "x": 100, "y": 150 },
                               "p2": { "tokens": 0, "x": 300, "y": 150 }
                               },
                               "transitions": {
                               "t1": { "inputs": ["p1"], "outputs": ["p2"] }
                               }
                               }
                           </metadata>
                           <!-- Add the pflow logo -->
                           <g transform="scale(.3,.3) translate(0,200)">
                               <path d="M100.88 28.02H78.46v5.61h-5.6v5.6h-5.6v-5.6h5.6v-5.61h5.6V5.6h-5.6V0H61.65v5.6h-5.6v28.02h-5.6V5.6h-5.6V0H33.64v5.6h-5.6v22.42h5.6v5.61h5.6v5.6h-5.6v-5.6h-5.6v-5.61H5.6v5.61H0v11.21h5.6v5.6h28.02v5.6H5.6v5.61H0v11.21h5.6v5.6h22.42v-5.6h5.6v-5.61h5.6v5.61h-5.6v5.6h-5.6v22.42h5.6v5.6h11.21v-5.6h5.6V72.86h5.6v28.02h5.6v5.6h11.21v-5.6h5.6V78.46h-5.6v-5.6h-5.6v-5.61h5.6v5.61h5.6v5.6h22.42v-5.6h5.6V61.65h-5.6v-5.61H72.84v-5.6h28.02v-5.6h5.6V33.63h-5.6v-5.61zM67.25 56.04v5.61h-5.6v5.6H44.84v-5.6h-5.6V44.84h5.6v-5.6h16.81v5.6h5.6v11.21zm89.89-28.02h-11.21v11.21h11.21zm33.63 11.21h11.21V28.02h-33.63v11.21z"></path>
                               <path d="M179.56 72.86h-11.21V39.23h-11.21v56.05h-11.21v11.21h33.63V95.28h-11.21V84.07h33.63V72.86zm22.42-22.42v22.42h11.21V39.23h-11.21zm33.63-22.42H224.4v11.21h11.21v33.63H224.4v11.21h33.63V72.86h-11.21V39.23h11.21V28.02h-11.21V16.81h-11.21z"></path>
                               <path d="M246.82 5.6v11.21h22.42V5.6zm56.05 56.05V5.6h-22.42v11.21h11.21v56.05h-11.21v11.21h33.63V72.86h-11.21zm33.63-11.21V39.23h-11.21v33.63h11.21zm22.42 0h-11.21v11.21h11.21zm0-11.21h11.21V28.02H336.5v11.21zm-11.21 33.63H336.5v11.21h33.63V72.86zm22.42-22.42v22.42h11.21V39.23h-11.21zm44.84-11.21V28.02h-22.42v11.21h11.21v22.42h11.21zm11.21 22.42h-11.21v11.21h11.21zm11.21 11.21h-11.21v11.21h11.21zm11.21-22.42V28.02h-11.21v44.84h11.21zm11.21 22.42H448.6v11.21h11.21zm11.21-11.21h-11.21v11.21h11.21zm11.21-33.63h-11.21v33.63h11.21V39.23h11.21V28.02z"></path>
                           </g>
                       </svg>