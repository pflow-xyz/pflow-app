<svg xmlns="http://www.w3.org/2000/svg" width="" height="" viewBox="" >
    <style>
        .place { fill: #ffffff; stroke: #000000; stroke-width: 1.5; }
        .transition.disabled { fill: #fab5b0; stroke: #000000; stroke-width: 1.5; cursor: pointer; user-select: text;}
        .transition { fill: #ffffff; stroke: #000000; stroke-width: 1.5; cursor: pointer; user-select: text;}
        .transition.enabled { fill: #62fa75; }
        .arc { stroke: #000000; stroke-width: 2; }
        .label { font-size: small; font-weight: bold; font-family: sans-serif; fill: #000000; user-select: none; }
        .token { fill: #000000; stroke: gray; stroke-width: 0.5; }
        .tokenSmall { font-size: small; user-select: none; font-weight: bold; }
        .red { fill: #ff0000; font-color: #ff0000; }
        .green { fill: #00ff00; font-color: #00ff00; }
    </style>
    <defs>
    <marker id="markerArrow1" markerWidth="15" markerHeight="8" refX="6" refY="4" orient="auto">
        <path d="M2,1 L2,8 L7,4 L2,1"/>
    </marker>
    <marker id="markerInhibit1" markerWidth="15" markerHeight="8" refX="5" refY="4" orient="auto">
        <circle cx="4" cy="4.5" r="3"/>
    </marker>
    </defs>
    <metadata id="metadata">
    {
        "tokens": [ "black" ],
        "places": {
        },
        "transitions": {
        },
        "arcs": [
        ]
    }
    </metadata>
    <script type="text/ecmascript">
    <![CDATA[
        let viewbox = [0, 0, 400, 400]; // default viewbox for the SVG
        let petriNet = {};

        function arcEndpoints(x1, y1, x2, y2) {
            const length = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
            const shorten = 22;
            const ratio = shorten / length;

            const newX1 = x1 + (x2 - x1) * ratio;
            const newY1 = y1 + (y2 - y1) * ratio;
            const newX2 = x2 - (x2 - x1) * ratio;
            const newY2 = y2 - (y2 - y1) * ratio;

            const midX = (newX1 + newX2) / 2;
            const midY = (newY1 + newY2) / 2;

            const angle = Math.atan2(newY2 - newY1, newX2 - newX1);

            return {
            x1: newX1, y1: newY1, x2: newX2, y2: newY2, midX, midY
            };
        }

        function createElements() {
            const svg = document.querySelector("svg");
            const fragment = document.createDocumentFragment();

            // Create arcs
            petriNet.arcs.forEach(arc => {
                // XXX don't name places & transitions the same XXX
                // this is a naive way to find the source and target
                const source = petriNet.places[arc.source] || petriNet.transitions[arc.source];
                const target = petriNet.places[arc.target] || petriNet.transitions[arc.target];
                if (!source || !target) {
                    console.error(`Source or target not found for arc: ${arc}`);
                    return;
                }
                const { x1, y1, x2, y2, midX, midY } = arcEndpoints(source.x, source.y, target.x, target.y);

                let path = document.createElementNS("http://www.w3.org/2000/svg", "line");
                path.setAttribute("class", "arc");
                path.setAttribute("x1", x1);
                path.setAttribute("y1", y1);
                path.setAttribute("x2", x2);
                path.setAttribute("y2", y2);
                path.setAttribute("marker-end", "url(#markerArrow1)");
                fragment.appendChild(path);

                angle = Math.atan2(y2 - y1, x2 - x1);
                let x = 0
                let y = 0

                // REVIEW: really need to move label left or right based on weight (offset for label text)
                if (x2 < x1) {
                    x = midX + 25 * Math.cos(angle + Math.PI / 2);
                    y = midY + 7 * Math.sin(angle + Math.PI / 2);
                    } else {
                    x = midX - 25 * Math.cos(angle + Math.PI / 2);
                    y = midY - 7 * Math.sin(angle + Math.PI / 2);
                }

                let color = "black"; // colorize token weights
                for (let i = 0; i < arc.weight.length; i++) {
                    if (arc.weight[i] > 0) {
                        color = petriNet.tokens[i];
                        break;
                    }
                }

                let text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                text.setAttribute("x", x);
                text.setAttribute("y", y);
                text.setAttribute("class", "label "+color);
                text.textContent = arc.weight[0];
                fragment.appendChild(text);
            });

            // Create places
            Object.entries(petriNet.places).forEach(([id, place]) => {
                let circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                circle.setAttribute("id", id);
                circle.setAttribute("class", "place");
                circle.setAttribute("cx", place.x);
                circle.setAttribute("cy", place.y);
                circle.setAttribute("r", "16");
                fragment.appendChild(circle);

                let text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                text.setAttribute("x", place.x - 18);
                text.setAttribute("y", place.y - 20);
                text.setAttribute("class", "label");
                text.textContent = id.toUpperCase();
                fragment.appendChild(text);
            });

            // Create transitions
            Object.entries(petriNet.transitions).forEach(([id, transition]) => {
                let rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                rect.setAttribute("id", id);
                rect.setAttribute("class", "transition");
                rect.setAttribute("x", transition.x - 15);
                rect.setAttribute("y", transition.y - 15);
                rect.setAttribute("rx", "5");
                rect.setAttribute("width", "30");
                rect.setAttribute("height", "30");
                fragment.appendChild(rect);

                let text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                text.setAttribute("x", transition.x - 15);
                text.setAttribute("y", transition.y - 20);

                // FIXME: should indicate if transition is enabled and/or fire-able
                text.setAttribute("class", "label");
                text.textContent = id.toUpperCase();
                fragment.appendChild(text);

                rect.addEventListener('click', () => fireTransition(id));
            });

            document.querySelectorAll(".place, .transition, .arc, .label").forEach(e => e.remove());
            svg.appendChild(fragment);
        }

        function fireTransition(id) {
            if (!petriNet.transitions || !petriNet.transitions[id]) {
                console.error(`Transition '${id}' not found in petriNet.transitions`);
                return;
            }

            let transition = petriNet.transitions[id];
            let sourceArcs = petriNet.arcs.filter(arc => arc.target === id);
            let targetArcs = petriNet.arcs.filter(arc => arc.source === id);
            let canFire = true;
            sourceArcs.forEach(arc => {
                let place = petriNet.places[arc.source];
                for (i = 0; i < place.tokens.length; i++) {
                    if (arc.weight[i] > place.tokens[i]) {
                        canFire = false;
                        break;
                    }
                    if (place.capacity[i] > 0 && place.tokens[i] + arc.weight[i] > place.capacity[i]) {
                        canFire = false;
                        break;
                    }
                }
            });

            if (canFire) {
                sourceArcs.forEach(arc => {
                    let place = petriNet.places[arc.source];
                    for (i = 0; i < place.tokens.length; i++) {
                        place.tokens[i] -= arc.weight[i];
                    }
                });
                targetArcs.forEach(arc => {
                    let place = petriNet.places[arc.target];
                    for (i = 0; i < place.tokens.length; i++) {
                        place.tokens[i] += arc.weight[i];
                    }
                });
                updateTokens();
                window.parent.postMessage({
                    type: 'transitionFired',
                    transitionId: id,
                    petriNet: petriNet
                }, '*'); // Notify parent window of the transition fire
            } else {
                console.log("Transition cannot fire");
            }
        }

        function createToken(id, tokens) {
            if (!tokens) return;
            for (let i = 0; i < tokens.length; i++) {
                if (tokens[i] === 0) continue;
                if (tokens[i] == 1) {
                    let token = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                    token.setAttribute("cx", petriNet.places[id].x);
                    token.setAttribute("cy", petriNet.places[id].y);
                    token.setAttribute("r", "3");
                    token.setAttribute("class", "token " + petriNet.tokens[i]);
                    document.querySelector("svg").appendChild(token);
                } else if (tokens[i] > 1) {
                    let text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                    text.setAttribute("x", petriNet.places[id].x-3);
                    text.setAttribute("y", petriNet.places[id].y+3);
                    text.setAttribute("class", "tokenSmall " + petriNet.tokens[i]);
                    text.textContent = tokens[i];
                    document.querySelector("svg").appendChild(text);
                }
            }
        }

        function updateTokens() {
            document.querySelectorAll(".token, .balance").forEach(e => e.remove());
            let x = 0;
            let y = 340;
            Object.entries(petriNet.places).forEach(([id, place]) => {
              // Create tokens
              for (let i = 0; i < place.tokens.length; i++) {
                  if (place.tokens[i] === 0) continue;
                  if (place.tokens[i] == 1) {
                      let token = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                      token.setAttribute("cx", place.x);
                      token.setAttribute("cy", place.y);
                      token.setAttribute("r", "3");
                      token.setAttribute("class", "token " + petriNet.tokens[i]);
                      document.querySelector("svg").appendChild(token);
                  } else if (place.tokens[i] > 1) {
                      let text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                      text.setAttribute("x", place.x - 3);
                      text.setAttribute("y", place.y + 3);
                      text.setAttribute("class", "tokenSmall " + petriNet.tokens[i]);
                      text.textContent = place.tokens[i];
                      document.querySelector("svg").appendChild(text);
                  }
              }
              // Create token balances
              /*
              for (let i = 0; i < place.tokens.length; i++) {
                  let text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                  text.setAttribute("x", x);
                  text.setAttribute("y", y);
                  text.setAttribute("class", "tokenSmall");
                  text.textContent = id + ": " + place.tokens[i];
                  if (place.tokens[i] > 0) {
                      text.setAttribute("class", "balance tokenSmall " + petriNet.tokens[i]);
                  } else {
                      text.setAttribute("class", "balance tokenSmall");
                  }
                  document.querySelector("svg").appendChild(text);
                  x += 50;
              }
              */
            });
        }

        function resetPetriNet() {
            Object.entries(petriNet.places).forEach(([id, place]) => {
                place.tokens = [...place.initial];
            });
            createElements();
            updateTokens();
        }

        function init(evt) {
            let metadataElement = document.getElementById("metadata");
            if (metadataElement) {
            let metadata = metadataElement.textContent.trim();
            try {
                petriNet = JSON.parse(metadata);
                createElements();
                updateTokens();
            } catch (error) {
                console.error("Failed to parse metadata: ", error);
            }
            } else {
                console.error("Metadata element not found");
            }
        }

        function resizeSvg(width, height) {
            const svg = document.querySelector("svg");
            if (svg) {
            viewbox = [0, 0, width, height];
                svg.setAttribute("viewBox", `0 0 ${width} ${height}`);
                svg.setAttribute("width", width); // set width
                svg.setAttribute("height", height); // set height
            } else {
                console.error("SVG element not found for resizing");
            }
        }

        window.addEventListener('message', (event) => {
            if (event.data.type === 'resize') {
                resizeSvg(event.data.width, event.data.height);
            }
            if (event.data.type === 'setModel') {
                try {
                    // Expecting a JSON string for the petri net
                    //petriNet = JSON.parse(event.data.model);
                    petriNet = event.data.model;
                    createElements();
                    updateTokens();
                } catch (error) {
                    console.error("Failed to set model: ", error);
                }
            }
            if (event.data.type === 'restart') {
                console.log("Resetting Petri Net to initial state");
                resetPetriNet();
            }
        });

        window.addEventListener('load', init);
        document.addEventListener('DOMContentLoaded', init);
    ]]>
    </script>
</svg>